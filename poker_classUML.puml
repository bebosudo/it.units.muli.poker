@startuml

class Card {
- CardFace face
- CardSuit suit
+ CardFace getFace()
+ CardSuit getSuit()
+ Boolean equals(Object o)
+ int hashCode()
+ String toString()
+ Comparator<Card> COMPARE_BY_FACE_DECR
}

class Hand {
- String original;
- ArrayList<Card> cards;
- Rank score;

- static final int MAX_HAND_SIZE = 7;
- static final int MIN_HAND_SIZE = 2;
- static final int VALID_HAND_SIZE = 5;
- static final int FIND_PAIR = 2;
- static final int FIND_SET = 3;
- static final int FIND_QUAD = 4;
- static final int FACE_DIFF_FOR_STRAIGHT_5_TO_ACE = CardFace.FIVE.getValue() - CardFace.ACE.getValue();
- static final int FACE_DIFF_FOR_STRAIGHT = VALID_HAND_SIZE - 1;

- Card getCard(int i);
+ String getOriginal();
+ Rank getScore();
+ String scoreString();
+ int size();
+ int compareTo(Hand h);
+ boolean equals(Object o);
+ int hashCode();
+ String toString();
+ void setScore();
+ void sortByFaceDecreasing();
- void sortByFaceDecreasing(ArrayList<Card> toBeOrdered);
+ void sortByFaceDecreasingAce1();
- void sortByFaceDecreasingAce1(ArrayList<Card> toBeOrdered);
+ boolean compareToCardsArray(Card[] other);
- boolean searchForGroupOfCardsInArrayThenPopGroup(ArrayList<Card> arrayFrom, ArrayList<Card> arrayTo, int groupLength);
- void popCards(ArrayList<Card> arrayFrom, ArrayList<Card> arrayTo);
- void popCards(ArrayList<Card> arrayFrom, ArrayList<Card> arrayTo, int minIndex, int maxIndex);
- boolean orderAndFindGroupsIntoCards(int... groupsLength);
- boolean orderByPair();
- boolean orderByDouble();
- boolean orderBySet();
- ArrayList<Card> getDistinctCardsByFace(int limitSearchTo);
- int getIndexOfStraight(ArrayList<Card> searchArray);
- void overwriteCardsForNormalStraight(ArrayList<Card> searchArray, int firstCardOfStraight);
- boolean orderByStraight();
- boolean checkIsStraight(ArrayList<Card> toBeChecked);
- boolean orderByStraight(int straightUpToNumber);
- boolean orderByFlush();
- boolean orderByFull();
- boolean orderByQuad();
- boolean orderByStraightFlush();

}

class Game {
- ArrayList<Hand> hands;
- ArrayList<Rank> ranks;
- ArrayList<Integer> winners;

- Stream<Integer> sortIndicesByComparingHands(ArrayList<Integer> indicesToCompare);
- void setWinners();
+ Rank getRank(int i);
+ int getWinnersSize();
+ int getWinner(int index);
+ void print();
}

class Main{
+ static void main(String[] args);
}

class Utils{
+ static <T> Predicate<T> distinctByKey(Function<? super T, ?> keyExtractor)
}

CardSuit <|-- Card
CardFace <|-- Card
Card <|-- Hand
Hand <|-- Game
Game <|-- Main
Utils <|-- Hand



enum CardSuit {
CLUBS = 1
SPADES = 2
HEARTS = 3
DIAMONDS = 4
}

enum CardFace {
TWO = 2
THREE = 3
FOUR = 4
FIVE = 5
SIX = 6
SEVEN = 7
EIGHT = 8
NINE = 9
TEN = 10
JACK = 11
QUEEN = 12
KING = 13
ACE = 14
- final int value
+ int getValue()
}

enum Rank {
FOLD = 0
HIGH_CARD = 1
PAIR = 2
TWO PAIRS = 3
THREE_OF_A_KIND = 4
STRAIGHT = 5
FLUSH = 6
FULL_HOUSE = 7
FOUR_OF_A_KIND = 8
STRAIGHT_FLUSH = 9
- int value
+ int getValue()
}

@enduml